// <auto-generated />
using System;
using KursachBD.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KursachBD.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.Coment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("FilmId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Coment");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.CreateYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Year");

                    b.HasKey("Id");

                    b.ToTable("CreateYear");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Budget");

                    b.Property<int>("CreateYearId");

                    b.Property<int?>("MPAAId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RetingId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("CreateYearId");

                    b.HasIndex("MPAAId");

                    b.HasIndex("RetingId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.FilmsToCountrys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<int>("FilmId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmsToCountrys");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.FilmsToGenres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId");

                    b.Property<int>("GenreId");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmsToGenres");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.MPAA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mpaa");

                    b.HasKey("Id");

                    b.ToTable("MPAA");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.Participants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Href");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.ParticipantsBuffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId");

                    b.Property<int>("ParticipantsId");

                    b.Property<int>("StatusParticipantsId");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("ParticipantsId");

                    b.HasIndex("StatusParticipantsId");

                    b.ToTable("ParticipantsBuffer");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.Reting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AllStar");

                    b.Property<string>("Discription");

                    b.Property<float>("UserStar");

                    b.HasKey("Id");

                    b.ToTable("Reting");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.StatusComent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StatusComent");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.StatusParticipants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StatusParticipants");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.StatusView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StatusView");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("StatusComentId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StatusComentId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.UserFilm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discription");

                    b.Property<int>("FilmId");

                    b.Property<int>("StatusViewId");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("StatusViewId");

                    b.ToTable("UserFilm");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.UserStar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("Star");

                    b.Property<int>("UserFilmId");

                    b.Property<int>("UserId");

                    b.Property<string>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserFilmId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserStar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.Coment", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.Film", "Film")
                        .WithMany("Coments")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KursachBD.Models.DataBaseModel.User")
                        .WithMany("Coments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.Film", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.CreateYear", "Year")
                        .WithMany("Films")
                        .HasForeignKey("CreateYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KursachBD.Models.DataBaseModel.MPAA", "MPAA")
                        .WithMany("Films")
                        .HasForeignKey("MPAAId");

                    b.HasOne("KursachBD.Models.DataBaseModel.Reting", "Reting")
                        .WithMany("Films")
                        .HasForeignKey("RetingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.FilmsToCountrys", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.Country", "Country")
                        .WithMany("FilmsToCountrys")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KursachBD.Models.DataBaseModel.Film", "Film")
                        .WithMany("FilmsToCountrys")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.FilmsToGenres", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.Film", "Film")
                        .WithMany("FilmsToGenres")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.ParticipantsBuffer", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.Film", "Film")
                        .WithMany("ParticipantsBuffers")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KursachBD.Models.DataBaseModel.Participants", "Participant")
                        .WithMany("ParticipantsBuffers")
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KursachBD.Models.DataBaseModel.StatusParticipants", "StatusParticipants")
                        .WithMany("ParticipantsBuffers")
                        .HasForeignKey("StatusParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.User", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.StatusComent", "StatusComent")
                        .WithMany("Users")
                        .HasForeignKey("StatusComentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.UserFilm", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.Film", "Film")
                        .WithMany("UserFilms")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KursachBD.Models.DataBaseModel.StatusView", "StatusView")
                        .WithMany("UserFilms")
                        .HasForeignKey("StatusViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KursachBD.Models.DataBaseModel.UserStar", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.UserFilm", "UserFilm")
                        .WithMany("UserStars")
                        .HasForeignKey("UserFilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KursachBD.Models.DataBaseModel.User", "User")
                        .WithMany("UserStars")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KursachBD.Models.DataBaseModel.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KursachBD.Models.DataBaseModel.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
